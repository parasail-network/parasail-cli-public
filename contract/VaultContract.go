// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VaultContractMetaData contains all meta data concerning the VaultContract contract.
var VaultContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"DealActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"DealCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"DealCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"DealCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compensationFee\",\"type\":\"uint256\"}],\"name\":\"DealTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"DelegatePausedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"WithdrawConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawDelay\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeDeals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"cancelDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"claimCompensation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"compensationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dealID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"createDeal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"dealAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"dealEndRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"deals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"enumStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegateAmount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegatePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getActiveDealIDs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getActiveDeals\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"enumStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"}],\"internalType\":\"structDeal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveDealsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"getCompensationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"getDeal\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"enumStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"}],\"internalType\":\"structDeal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDealTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"getSlashCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_delegatePaused\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"lastRewardRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"}],\"name\":\"payDeal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawDelay\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"dealIDs\",\"type\":\"string[]\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestedWithdrawUnlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"dealID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"slashCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleDelegatePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManager\",\"outputs\":[{\"internalType\":\"contractIVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080806040523460aa575f516020613e815f395f51905f525460ff8160401c16609b576002600160401b03196001600160401b038216016049575b604051613dd290816100af8239f35b6001600160401b0319166001600160401b039081175f516020613e815f395f51905f525581527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a15f80603a565b63f92ee8a960e01b5f5260045ffd5b5f80fdfe60806040526004361015610011575f80fd5b5f5f3560e01c806306d3b28014612c985780630ca6aa79146125ef5780630d8e6e2c146125a15780632e18c59a1461241e5780633013ce29146123f55780633667796714611215578063381cbd51146123a2578063398711141461236e57806345a5559a14611ffa5780634ac8eb5f14611fdc5780635b3ca01514611fa857806368124f9a14611db45780636b8b10c714611d365780636bc373151461145c578063715018a6146113f35780637d001fba146113d55780638122553c1461137257806384b768241461128f578063893d20e8146112335780638a4adf24146112685780638da5cb5b146112335780639105e84c14611215578063953841c0146111f05780639ca998c71461119d5780639fa6dd351461101e578063a0a57dac14610f7a578063bb8c979714610f13578063bd543c4e146109d0578063c33581201461099c578063d1c73f2c1461097e578063d57398f614610960578063d6eb5910146108cf578063da4bafbb14610736578063e7079180146106c2578063e8536d611461068e578063eadb3c9c14610670578063ed931da21461063c578063f2fde38b14610614578063f3227dc41461052d578063f3e9bc281461050f5763fecf9734146101dd575f80fd5b3461050c57608036600319011261050c576101f6612fa8565b602435906001600160a01b038216820361050a576044356001600160a01b038116908190036105065760643591821515809303610502575f516020613d7d5f395f51905f52549360ff8560401c1615946001600160401b038116801590816104fa575b60011490816104f0575b1590816104e7575b506104d8579286926102b56004936020968960016001600160401b03198316175f516020613d7d5f395f51905f52556104ac575b506102a8613cb3565b6102b0613cb3565b6135a9565b6102bd613cb3565b6102c5613cb3565b60015f516020613d5d5f395f51905f52819055845481546001600160a01b03191690931790556001600160a81b031982166001600160a01b039190911690811760a09690961b60ff60a01b169590951783555f19600755604051631d8cf42560e11b8152948593849216175afa9081156104a1578391610472575b506040519061034e82612d54565b60405161035c602082612d6f565b848152825260208201908482526040830185815260608401868152608085019260018060a01b0316835260a08501916001835260c08601944286526103ac602060405160088152209751886131d8565b51600187015551600286015551600385015590516004840180546001600160a01b0319166001600160a01b0392909216919091178155905190600582101561045e57600592916103fb9161329c565b519101556104065780f35b68ff0000000000000000195f516020613d7d5f395f51905f5254165f516020613d7d5f395f51905f52557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a180f35b634e487b7160e01b86526021600452602486fd5b610494915060203d60201161049a575b61048c8183612d6f565b8101906132c0565b5f610340565b503d610482565b6040513d85823e3d90fd5b68ffffffffffffffffff191668010000000000000001175f516020613d7d5f395f51905f52555f61029f565b63f92ee8a960e01b8752600487fd5b9050155f61026b565b303b159150610263565b879150610259565b8480fd5b8380fd5b825b80fd5b503461050c578060031936011261050c576020600354604051908152f35b503461050c57602036600319011261050c576004356001600160401b0381116106105761055e903690600401612d03565b919061056861361a565b6004604051848382376020818681016008815203019020019260ff845460a01c169360058510156105fc576105bf7fe564eacc57766274b4b10cbc411538b655dff38244c0216baab5d8e013205b549495156130b4565b805460ff60a01b1916600160a21b1790556004546105dc90613aff565b6004556105f6604051928392602084526020840191612fbe565b0390a180f35b634e487b7160e01b84526021600452602484fd5b5080fd5b503461050c57602036600319011261050c57610639610631612fa8565b6102b061361a565b80f35b503461050c576020808061064f36612de1565b604051928184925191829101835e8101600c81520301902054604051908152f35b503461050c578060031936011261050c576020600454604051908152f35b503461050c57602080806106a136612de1565b604051928184925191829101835e8101600f81520301902054604051908152f35b503461050c57602036600319011261050c57600435906001600160401b03821161050c5761073261071e60206106fb3660048701612d03565b919061070561334f565b5082604051938492833781016008815203019020613047565b604051918291602083526020830190612e42565b0390f35b503461050c5761074536612e1f565b9061075081836132df565b600181018091116108bb5761076481613338565b906107726040519283612d6f565b808252610781601f1991613338565b01845b8181106108aa575050815b8381111561086a5784600a546107a481613338565b6107b16040519182612d6f565b818152600a83526020810191837fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8845b83831061084d57868587604051928392602084019060208552518091526040840160408260051b8601019392905b82821061081e57505050500390f35b9193600191939550602061083d8192603f198a82030186528851612d30565b960192019201859493919261080f565b60016020819261085c85612f08565b8152019201920191906107e1565b8061089f61087a6108a593612ea4565b5061088e61088887856132df565b91612f08565b61089882876133cd565b52846133cd565b506133bf565b61078f565b806060602080938601015201610784565b634e487b7160e01b84526011600452602484fd5b503461050c578060031936011261050c576001546001600160a01b0316156108fe576020600254604051908152f35b60405162461bcd60e51b815260206004820152603460248201527f5661756c74426173652e676574546f74616c436f6c6c61746572616c3a2064656044820152731b1959d85d19481d1bdad95b881b9bdd081cd95d60621b6064820152608490fd5b503461050c578060031936011261050c576020600a54604051908152f35b503461050c578060031936011261050c576020600754604051908152f35b503461050c57602080806109af36612de1565b604051928184925191829101835e8101600e81520301902054604051908152f35b503461050c5760a036600319011261050c576004356001600160401b03811161061057610a01903690600401612d03565b602435926084356001600160a01b0381169160643591604435919084900361050c57610a2b61361a565b60025481546040516335392b7160e01b81529190602090839060049082906001600160a01b03165afa9081156104a1578391610edd575b610a6c9250612fde565b60055490606482029180830460641490151715610ccc5790610a8f911015612ff1565b610a9761364d565b6002548154604051630e830b6960e41b81526001600160a01b039091169190602081600481865afa908115610d18578491610eab575b508110610e48578315610df7578415610da6578615610d6157610b04604051888a82376020818a8101600881520301902054612ed0565b610d235760046020610b1f87610b1a888e612fde565b612fde565b93604051928380926335392b7160e01b82525afa908115610d18578491610ce0575b50610b4f90610b5892612fde565b91600554613100565b90606482029180830460641490151715610ccc571015610b779061310d565b60405190610b8482612d54565b610b8f368789612dab565b825260208201978852604082018381526060830190858252608084019187835260a085019184835260c086019b428d526040518b8d8237808c8101600881520360200190209651610be090886131d8565b51600187015551600286015551600385015590516004840180546001600160a01b0319166001600160a01b03929092169190911781559051916005831015610cb8575097610c536005927f018b5babd4090c89601b261a977230da8c20221a4f1489500ced9b7baa633e0c98999a61329c565b5191015560405192839260808452610c6f60808501888a612fbe565b926020850152604084015260608301520390a1610c8d6004546133bf565b60045560015f516020613d5d5f395f51905f5255610732604051928392602084526020840191612fbe565b634e487b7160e01b81526021600452602490fd5b634e487b7160e01b83526011600452602483fd5b90506020813d602011610d10575b81610cfb60209383612d6f565b81010312610d0c5751610b58610b41565b5f80fd5b3d9150610cee565b6040513d86823e3d90fd5b60405162461bcd60e51b81526020600482015260166024820152754465616c20494420616c72656164792065786973747360501b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f4465616c204944206d757374206e6f7420626520656d707479000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526024808201527f4465616c206475726174696f6e206d75737420626520677265617465722074686044820152630616e20360e41b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f4465616c207175616e74697479206d75737420626520677265617465722074686044820152630616e20360e41b6064820152608490fd5b60405162461bcd60e51b815260206004820152603560248201527f5661756c742068617320696e73756666696369656e7420636f6c6c61746572616044820152746c20746f2070726f7669646520736572766963657360581b6064820152608490fd5b90506020813d602011610ed5575b81610ec660209383612d6f565b81010312610d0c57515f610acd565b3d9150610eb9565b90506020823d602011610f0b575b81610ef860209383612d6f565b81010312610d0c57610a6c915190610a62565b3d9150610eeb565b503461050c57602036600319011261050c576004356001600160401b03811161061057610f61610f4a610f66923690600401612d03565b610f5261361a565b610f5a61364d565b3691612dab565b6136c1565b60015f516020613d5d5f395f51905f525580f35b503461050c57610fe4602080610f8f36612de1565b604051928184925191829101835e81016008815203019020610fb081612f08565b906001810154906110156002820154916003810154600560048301549201549360405197889760e0895260e0890190612d30565b6020880196909652604087015260608601526001600160a01b038116608086015260a080860191901c60ff16612e35565b60c08301520390f35b503461050c57602036600319011261050c5760043561104760018060a01b0383541633146132ec565b61104f61364d565b60ff825460a01c1661114c5780156110ed576001546001600160a01b0316156110955761107e90600254613100565b60025560015f516020613d5d5f395f51905f525580f35b60405162461bcd60e51b815260206004820152602a60248201527f5661756c74426173652e64656c65676174653a2064656c656761746520746f6b604482015269195b881b9bdd081cd95d60b21b6064820152608490fd5b60405162461bcd60e51b815260206004820152603160248201527f5661756c74426173652e64656c65676174653a20616d6f756e74206d75737420604482015270062652067726561746572207468616e203607c1b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f5661756c74426173652e64656c65676174653a207661756c74206973207061756044820152621cd95960ea1b6064820152608490fd5b503461050c57602036600319011261050c576004356001600160401b038111610610579060206111d281933690600401612d03565b92508260405193849283378101600e81520301902054604051908152f35b503461050c578060031936011261050c5760ff6020915460a01c166040519015158152f35b503461050c578060031936011261050c576020600554604051908152f35b503461050c578060031936011261050c575f516020613d3d5f395f51905f52546040516001600160a01b039091168152602090f35b503461050c578060031936011261050c57546040516001600160a01b039091168152602090f35b503461050c578060031936011261050c576112b460018060a01b0382541633146132ec565b6112bc61364d565b6006548015611315576112d6905f19600755600254613100565b600255806006557f6bcd1f6c4aebc81d81e3093e2f0e29e646cf00fcaaed7ab528d2a7c1f7309dad8180a160015f516020613d5d5f395f51905f525580f35b60405162461bcd60e51b815260206004820152602f60248201527f5661756c74426173652e63616e63656c57697468647261773a206e6f2077697460448201526e1a191c985dc81c995c5d595cdd1959608a1b6064820152608490fd5b503461050c57602036600319011261050c57600435600a548110156106105761139a90612ea4565b9190916113c1576107326113ad83612f08565b604051918291602083526020830190612d30565b634e487b7160e01b81526004819052602490fd5b503461050c578060031936011261050c576020600654604051908152f35b503461050c578060031936011261050c5761140c61361a565b5f516020613d3d5f395f51905f5280546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461050c57604036600319011261050c576004356001600160401b0381116106105761148d903690600401612d03565b906024356114a560018060a01b0385541633146132ec565b6114ad61364d565b806114cb604051858582376020818781016008815203019020613047565b9160a0830151600581101561198c5760016114e69114613545565b600254808211611ce357816114fa916132df565b60025585546040516303e75b6d60e41b81526001600160a01b0390911690602081600481855afa908115611aff578891611cb1575b50611b71575b50508454604051639138591160e01b81526001600160a01b0390911690602081600481855afa908115611925578791611b3f575b50611a5e575b5061157c81600354613100565b60035561159f60405185858237602081878101600f815203019020918254613100565b905560405183838237602081858101600e8152030190206115c081546133bf565b9055821515806119d3575b6115e5575b8360015f516020613d5d5f395f51905f525580f35b8060606115fe6020611607940151604084015190612fde565b91015190612fde565b835460405163c61f285b60e01b815290602090829060049082906001600160a01b03165afa9081156118e45785916119a0575b5061164790606492612fde565b0491604051818382376020818381016008815203019020926004840160ff815460a01c16600581101561198c5760016116809114613545565b805460ff60a01b1916600160a11b1790556116a461169f368486612dab565b613b9e565b6116af600454613aff565b60049081558554604051633b6269d160e11b81529160209183919082906001600160a01b03165afa908115611981578691611962575b5060405163066f022b60e11b81526001600160a01b03919091169490602081600481895afa908115611925578791611930575b506040519063932329c960e01b82526004820152602081602481895afa9081156119255787916118ef575b50946117828261177c61175f60049960056020970154906132df565b60036117746001850154600286015490612fde565b9301546132df565b90612fde565b61178e816005546132df565b60055560405185878237838187810160098152030190206117b08282546132df565b90556117be81600354613100565b6003556117e0604051868882378481888101600f815203019020918254613100565b90556117ee836002546132df565b60025560405163066f022b60e11b815295869182905afa80156118e4578590611892575b7fa95dcc04e9a491d9257759fea6f92d2ef4815cd46575ed388b45d75d8f39d109945060405183858237600d848201908152819003602001902055600154855461186a9183916001600160a01b039081169116613685565b611881604051938493604085526040850191612fbe565b9060208301520390a15f80806115d0565b506020843d6020116118dc575b816118ac60209383612d6f565b81010312610d0c577fa95dcc04e9a491d9257759fea6f92d2ef4815cd46575ed388b45d75d8f39d1099351611812565b3d915061189f565b6040513d87823e3d90fd5b9590506020863d60201161191d575b8161190b60209383612d6f565b81010312610d0c579451611782611743565b3d91506118fe565b6040513d89823e3d90fd5b90506020813d60201161195a575b8161194b60209383612d6f565b81010312610d0c57515f611718565b3d915061193e565b61197b915060203d60201161049a5761048c8183612d6f565b5f6116e5565b6040513d88823e3d90fd5b634e487b7160e01b87526021600452602487fd5b90506020813d6020116119cb575b816119bb60209383612d6f565b81010312610d0c5751606461163a565b3d91506119ae565b5060025415806115cb5750600460405184848237602081868101600e81520301902054602060018060a01b03875416604051938480926322f9592f60e01b82525afa918215611981578692611a2a575b50116115cb565b9091506020813d602011611a56575b81611a4660209383612d6f565b81010312610d0c5751905f611a23565b3d9150611a39565b604051639138591160e01b815291602083600481855afa928315611925578793611b0a575b506064611a9260049483612fde565b0491602060018060a01b03600154169160405195868092631d8cf42560e11b82525afa938415611aff57611ad894611ad39285928b92611ade575b50613685565b6132df565b5f61156f565b611af891925060203d60201161049a5761048c8183612d6f565b905f611acd565b6040513d8a823e3d90fd5b92506020833d602011611b37575b81611b2560209383612d6f565b81010312610d0c579151916064611a83565b3d9150611b18565b90506020813d602011611b69575b81611b5a60209383612d6f565b81010312610d0c57515f611569565b3d9150611b4d565b6040516303e75b6d60e41b8152925090602083600481855afa928315611925578793611c7c575b5060206064611ba960049584612fde565b0492604051948580926338b39d2960e01b82525afa80156119255782602091611c11958a91611c5f575b5060015460405163a9059cbb60e01b81526001600160a01b0392831660048201526024810193909352919586929091169082908b9082906044820190565b03925af192831561192557611c2b93611c32575b506132df565b5f80611535565b611c539060203d602011611c58575b611c4b8183612d6f565b810190613591565b611c25565b503d611c41565b611c769150833d851161049a5761048c8183612d6f565b5f611bd3565b92506020833d602011611ca9575b81611c9760209383612d6f565b81010312610d0c579151916020611b98565b3d9150611c8a565b90506020813d602011611cdb575b81611ccc60209383612d6f565b81010312610d0c57515f61152f565b3d9150611cbf565b60405162461bcd60e51b815260206004820152602560248201527f536c61736820616d6f756e74206578636565647320746f74616c20636f6c6c616044820152641d195c985b60da1b6064820152608490fd5b503461050c57611d4e611d4836612e1f565b906133e1565b906040519182916020830160208452825180915260408401602060408360051b870101940192905b828210611d8557505050500390f35b91936001919395506020611da48192603f198a82030186528851612e42565b9601920192018594939192611d76565b503461050c578060031936011261050c5780546004906001600160a01b0316611dde3382146132ec565b602060025491604051938480926335392b7160e01b82525afa9081156104a1578391611f72575b611e0f9250612fde565b60055490606482029180830460641490151715610ccc5790611e32911015612ff1565b611e3a61364d565b6006548015611f14576007544210611eb6575f196007556001545f516020613d3d5f395f51905f5254611e7a92916001600160a01b039182169116613685565b806006557f167dd01d07a122f62228d08361b7daa4126637eacae74c28069c3a44379020d28180a160015f516020613d5d5f395f51905f525580f35b60405162461bcd60e51b815260206004820152603060248201527f5661756c74426173652e636f6e6669726d57697468647261773a20776974686460448201526f1c985dc81b9bdd081d5b9b1bd8dad95960821b6064820152608490fd5b60405162461bcd60e51b815260206004820152603060248201527f5661756c74426173652e636f6e6669726d57697468647261773a206e6f20776960448201526f1d1a191c985dc81c995c5d595cdd195960821b6064820152608490fd5b90506020823d602011611fa0575b81611f8d60209383612d6f565b81010312610d0c57611e0f915190611e05565b3d9150611f80565b503461050c5760208080611fbb36612de1565b604051928184925191829101835e8101600d81520301902054604051908152f35b503461050c578060031936011261050c576020600254604051908152f35b503461050c57606036600319011261050c576004356024356044356001600160401b0381116105065736602382011215610506578060040135916001600160401b038311610502573660248460051b840101116105025760025485546040516335392b7160e01b81526001600160a01b0390911691602082600481865afa908115611aff578891612338575b6120909250612fde565b60055490606482029180830460641490151715612324576120be92916120b7911015612ff1565b33146132ec565b6120c661364d565b83600254106122b957919236829003604219019290855b858110156121395760248160051b8501013585811215612135578401906024820135916001600160401b03831161213157604401823603811361213157610f6161212b916001943691612dab565b016120dd565b8880fd5b8780fd5b86838360025490600461214c82846132df565b85546040516335392b7160e01b81529260209184919082906001600160a01b03165afa908115611981578691612283575b6121879250612fde565b6005549060648202918083046064149015171561226f5710612204577f622ec52892a9917a9f66bd872232d3bea677db12565dd6da5f4bfc14607ec1d7926121d1826040946132df565b600255816006556121e28142613100565b60075582519182526020820152a160015f516020613d5d5f395f51905f525580f35b60405162461bcd60e51b815260206004820152603c60248201527f5661756c74426173652e77697468647261773a20696e73756666696369656e7460448201527f20636f6c6c61746572616c20746f20737570706f7274206465616c73000000006064820152608490fd5b634e487b7160e01b86526011600452602486fd5b90506020823d6020116122b1575b8161229e60209383612d6f565b81010312610d0c5761218791519061217d565b3d9150612291565b60405162461bcd60e51b815260206004820152603760248201527f5661756c74426173652e77697468647261773a20696e73756666696369656e7460448201527f20636f6c6c61746572616c20746f2077697468647261770000000000000000006064820152608490fd5b634e487b7160e01b88526011600452602488fd5b90506020823d602011612366575b8161235360209383612d6f565b81010312610d0c57612090915190612086565b3d9150612346565b503461050c576020808061238136612de1565b604051928184925191829101835e8101600981520301902054604051908152f35b503461050c57602036600319011261050c576004356001600160401b038111610610579060206123d781933690600401612d03565b92508260405193849283378101600f81520301902054604051908152f35b503461050c578060031936011261050c576001546040516001600160a01b039091168152602090f35b503461050c57602036600319011261050c576004356001600160401b0381116106105761244f903690600401612d03565b9061245861364d565b60405182828237600881840190815281900360200190206001600160a01b039060809061248490613047565b01511633036125505760405182828237602081848101600f81520301902054156124fb5782610f66926020604051828582378181848101600f81520301902054938260405193849283378101600f815203019020556124e5816003546132df565b60035560015433906001600160a01b0316613685565b60405162461bcd60e51b815260206004820152602760248201527f4e6f20636f6d70656e736174696f6e20617661696c61626c6520666f722074686044820152661a5cc81919585b60ca1b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f43616c6c6572206973206e6f742074686520636c69656e74206f6620746865206044820152631919585b60e21b6064820152608490fd5b503461050c578060031936011261050c57506107326040516125c4604082612d6f565b600a8152693132ba3096989718171960b11b6020820152604051918291602083526020830190612d30565b5034610d0c576020366003190112610d0c576004356001600160401b038111610d0c57612620903690600401612d03565b919061262a61364d565b6002545f546040516335392b7160e01b81526001600160a01b03909116949190602081600481895afa8015612a64575f90612c64575b61266b915082612fde565b90600554916064830283810460641484151715612a6f5761268d911015612ff1565b6126aa604051848682376020818681016008815203019020613047565b9160a0830180516005811015612b67576126c490156130b4565b6080840180519093906001600160a01b031680612c07575b50602085019283519060046126f76040890193845190612fde565b93602061270a60608b0196875190612fde565b9d604051938480926335392b7160e01b82525afa908115612a64575f91612bd1575b6127369250612fde565b906127418c82613100565b90606482029180830460641490151715612a6f576127658d9261276a94101561310d565b613100565b60055560405187898237602081898101600981520301902061278d8b8254613100565b90556001546001600160a01b03168015612b7b575f546040516323b872dd60e01b60208201523360248201526001600160a01b03909116604482015260648082018d905281526127e7916127e2608483612d6f565b613b0b565b6001835260c0860193428552338652612816604051898b82376020818b810160088152030190209751886131d8565b51600187015551600286015551600385015591516004840180546001600160a01b0319166001600160a01b03929092169190911781559151916005831015612b67576005926128649161329c565b519101555f54604051633b6269d160e11b815290602090829060049082906001600160a01b03165afa908115612a64576004916020915f91612b4a575b5060405163066f022b60e11b815292839182906001600160a01b03165afa908115612a64575f91612b18575b5060405182848237602081848101600c81520301902055600a5468010000000000000000811015612af1578060016129089201600a55612ea4565b612b05576001600160401b038211612af15761292e826129288354612ed0565b83613195565b5f82601f8111600114612a8e578061295a925f91612a83575b508160011b915f199060031b1c19161790565b90555b600a545f198101908111612a6f5760405182848237600b8382019081528190036020019020555f546001600160a01b0316803b15610d0c575f6040518092630c78f6f960e21b8252306004830152604060248301528183816129c360448201898b612fbe565b03925af18015612a6457612a30575b507f71a59c69486d39707074574bcea523028805b0015d3f87aa6a2bf44281e7639f9293612a0d604051938493606085526060850191612fbe565b9060208301523360408301520390a160015f516020613d5d5f395f51905f525580f35b7f71a59c69486d39707074574bcea523028805b0015d3f87aa6a2bf44281e7639f93505f612a5d91612d6f565b5f926129d2565b6040513d5f823e3d90fd5b634e487b7160e01b5f52601160045260245ffd5b90508501355f612947565b50601f19831690825f528360205f20925f5b818110612ad6575010612abd575b5050600182811b01905561295d565b8401355f19600385901b60f8161c191690555f80612aae565b87840135855560019094019360209384019387935001612aa0565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f525f60045260245ffd5b90506020813d602011612b42575b81612b3360209383612d6f565b81010312610d0c57515f6128cd565b3d9150612b26565b612b619150823d841161049a5761048c8183612d6f565b5f6128a1565b634e487b7160e01b5f52602160045260245ffd5b60405162461bcd60e51b815260206004820152602860248201527f5661756c74426173652e7061794465616c3a207061796d656e7420746f6b656e604482015267081b9bdd081cd95d60c21b6064820152608490fd5b90506020823d602011612bff575b81612bec60209383612d6f565b81010312610d0c5761273691519061272c565b3d9150612bdf565b3303612c13575f6126dc565b60405162461bcd60e51b8152602060048201526024808201527f4465616c20776173206e6f74206372656174656420666f72207468697320636c6044820152631a595b9d60e21b6064820152608490fd5b506020813d602011612c90575b81612c7e60209383612d6f565b81010312610d0c5761266b9051612660565b3d9150612c71565b34610d0c575f366003190112610d0c57612cb061361a565b7f1b005555035720946fb04f791db85f4e2d2ebcc123c059c1996e4538519f18f760205f5460ff60a01b60ff8260a01c161560a01b169060ff60a01b191617805f5560ff6040519160a01c1615158152a1005b9181601f84011215610d0c578235916001600160401b038311610d0c5760208381860195010111610d0c57565b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b60e081019081106001600160401b03821117612af157604052565b90601f801991011681019081106001600160401b03821117612af157604052565b6001600160401b038111612af157601f01601f191660200190565b929192612db782612d90565b91612dc56040519384612d6f565b829481845281830111610d0c578281602093845f960137010152565b6020600319820112610d0c57600435906001600160401b038211610d0c5780602383011215610d0c57816024612e1c93600401359101612dab565b90565b6040906003190112610d0c576004359060243590565b906005821015612b675752565b9060c080612e59845160e0855260e0850190612d30565b9360208101516020850152604081015160408501526060810151606085015260018060a01b036080820151166080850152612e9c60a082015160a0860190612e35565b015191015290565b600a54811015612ebc57600a5f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b90600182811c92168015612efe575b6020831014612eea57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612edf565b9060405191825f825492612f1b84612ed0565b8084529360018116908115612f865750600114612f42575b50612f4092500383612d6f565b565b90505f9291925260205f20905f915b818310612f6a575050906020612f40928201015f612f33565b6020919350806001915483858901015201910190918492612f51565b905060209250612f4094915060ff191682840152151560051b8201015f612f33565b600435906001600160a01b0382168203610d0c57565b908060209392818452848401375f828201840152601f01601f1916010190565b81810292918115918404141715612a6f57565b15612ff857565b60405162461bcd60e51b815260206004820152602160248201527f5661756c742068617320696e73756666696369656e7420636f6c6c61746572616044820152601b60fa1b6064820152608490fd5b9060405161305481612d54565b809261305f81612f08565b825260018101546020830152600281015460408301526003810154606083015260048101546001600160a01b038116608084015260a01c60ff166005811015612b675760c09160059160a08501520154910152565b156130bb57565b60405162461bcd60e51b815260206004820152601f60248201527f4465616c206973206e6f7420696e2050726541637469766520737461747573006044820152606490fd5b91908201809211612a6f57565b1561311457565b60405162461bcd60e51b815260206004820152603860248201527f5661756c742068617320696e73756666696369656e7420636f6c6c617465726160448201527f6c20746f20756e64657274616b652074686973206465616c00000000000000006064820152608490fd5b81811061318a575050565b5f815560010161317f565b9190601f81116131a457505050565b612f40925f5260205f20906020601f840160051c830193106131ce575b601f0160051c019061317f565b90915081906131c1565b91909182516001600160401b038111612af1576131ff816131f98454612ed0565b84613195565b6020601f821160011461323e57819061322f9394955f92613233575b50508160011b915f199060031b1c19161790565b9055565b015190505f8061321b565b601f19821690835f52805f20915f5b8181106132845750958360019596971061326c575b505050811b019055565b01515f1960f88460031b161c191690555f8080613262565b9192602060018192868b01518155019401920161324d565b906005811015612b6757815460ff60a01b191660a09190911b60ff60a01b16179055565b90816020910312610d0c57516001600160a01b0381168103610d0c5790565b91908203918211612a6f57565b156132f357565b60405162461bcd60e51b815260206004820152601a60248201527f5661756c74426173652e6f6e6c795661756c744d616e616765720000000000006044820152606490fd5b6001600160401b038111612af15760051b60200190565b6040519061335c82612d54565b5f60c083606081528260208201528260408201528260608201528260808201528260a08201520152565b60405190613395602083612d6f565b5f80835282815b8281106133a857505050565b6020906133b361334f565b8282850101520161339c565b5f198114612a6f5760010190565b8051821015612ebc5760209160051b010190565b90600a54801561353a5782821090811561352f575b506135255761340582826132df565b9160018301809311612a6f5761341a83613338565b926134286040519485612d6f565b808452613437601f1991613338565b015f5b81811061350e575050805b828111156134535750505090565b61345c81612ea4565b50604051905f9080549061346f82612ed0565b91600181169081156134f657506001146134c3575b50508160206134be949383600861089f9552030190206134ad6134a786856132df565b91613047565b6134b782896133cd565b52866133cd565b613445565b9091505f5260205f205f905b8282106134e25750508101816020613484565b6001816020925484870152019101906134cf565b60ff1916855250508015150282019050816020613484565b60209061351961334f565b8282880101520161343a565b5050612e1c613386565b90508210155f6133f6565b505050612e1c613386565b1561354c57565b60405162461bcd60e51b815260206004820152601c60248201527f4465616c206973206e6f7420696e2041637469766520737461747573000000006044820152606490fd5b90816020910312610d0c57518015158103610d0c5790565b6001600160a01b03168015613607575f516020613d3d5f395f51905f5280546001600160a01b0319811683179091556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b631e4fbdf760e01b5f525f60045260245ffd5b5f516020613d3d5f395f51905f52546001600160a01b0316330361363a57565b63118cdaa760e01b5f523360045260245ffd5b60025f516020613d5d5f395f51905f5254146136765760025f516020613d5d5f395f51905f5255565b633ee5aeb560e01b5f5260045ffd5b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152612f40916127e2606483612d6f565b5f6040516136e5835191602081818701948086835e81016008815203019020613047565b5f54604051633b6269d160e11b815290602090829060049082906001600160a01b03165afa908115612a64575f91613ae0575b5060405163066f022b60e11b81526001600160a01b039190911690602081600481855afa908115612a64575f91613aae575b5060c0830161375f8151606086015190613100565b60405163932329c960e01b8152600481018490529093602082602481845afa918215612a64575f92613a7a575b50602060405181818c51808c835e8101600c8152030190205460246040518094819363932329c960e01b835260048301525afa908115612a64575f91613a48575b50836040516020818c51808c835e8101600c81520301902054106137f7575b505050505050505050565b915161382e9280821115613a4157505b848210948515613a32575061381b916132df565b610b1a6020860151604087015190612fde565b9060405160208189518089835e8101600c8152030190205560405160208188518088835e810160098152030190206138678282546132df565b90555f546001600160a01b0316803b15610d0c575f809160246040518094819363366b9a8b60e11b83528760048401525af18015612a6457613a1b575b50806138b56138c0926005546132df565b600555600254613100565b6002551590816139ef575b506138dc575b8080808080806137ec565b60405160208185518085835e81016009815203019020546139b3576004906020604051809286518091835e81016008815203019020019060ff825460a01c16600581101561399f57917f77eb1adb3703e1fceb722037009d71a45fae2b1e05434ee20e69ed1fc32c9df3939161395760016139949514613545565b50805460ff60a01b1916600360a01b17905561397281613b9e565b61397d600454613aff565b600455604051918291602083526020830190612d30565b0390a15f80806138d1565b634e487b7160e01b82526021600452602482fd5b60405162461bcd60e51b815260206004820152601460248201527304465616c20616d6f756e74206973206e6f7420360641b6044820152606490fd5b60a0915001516005811015613a07576001145f6138cb565b634e487b7160e01b83526021600452602483fd5b613a289195505f90612d6f565b5f936138c06138a4565b613a3c92506132df565b61381b565b9050613807565b90506020813d602011613a72575b81613a6360209383612d6f565b81010312610d0c57515f6137cd565b3d9150613a56565b9091506020813d602011613aa6575b81613a9660209383612d6f565b81010312610d0c5751905f61378c565b3d9150613a89565b90506020813d602011613ad8575b81613ac960209383612d6f565b81010312610d0c57515f61374a565b3d9150613abc565b613af9915060203d60201161049a5761048c8183612d6f565b5f613718565b8015612a6f575f190190565b5f80613b539260018060a01b03169360208151910182865af13d15613b96573d90613b3582612d90565b91613b436040519384612d6f565b82523d5f602084013e5b83613cde565b8051908115159182613b7b575b5050613b695750565b635274afe760e01b5f5260045260245ffd5b613b8e9250602080918301019101613591565b155f80613b60565b606090613b4d565b604051815190602081818501938085835e8101600b81520301902054600a545f198101908111612a6f57613bd4613bda91612ea4565b50612f08565b613be382612ea4565b612b055781613bf560209384936131d8565b604051928184925191829101835e8101600b81520301902055600a548015613c9f575f190191613c2483612ea4565b919091612b05575f9382613c3a60209454612ed0565b9081613c5e575b5050600a55604051928391518091835e8101600b81520301902055565b81601f889311600114613c755750555b5f80613c41565b818352858320613c9091601f0160051c81019060010161317f565b80825281858120915555613c6e565b634e487b7160e01b5f52603160045260245ffd5b60ff5f516020613d7d5f395f51905f525460401c1615613ccf57565b631afcd79f60e31b5f5260045ffd5b90613d025750805115613cf357805190602001fd5b630a12f52160e11b5f5260045ffd5b81511580613d33575b613d13575090565b639996b31560e01b5f9081526001600160a01b0391909116600452602490fd5b50803b15613d0b56fe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993009b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a26469706673582212204b07f6f74196eb0f4093b9a98c0fd26aed5e451a7183fcd222ce0ae8358c652664736f6c634300081c0033f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00",
}

// VaultContractABI is the input ABI used to generate the binding from.
// Deprecated: Use VaultContractMetaData.ABI instead.
var VaultContractABI = VaultContractMetaData.ABI

// VaultContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VaultContractMetaData.Bin instead.
var VaultContractBin = VaultContractMetaData.Bin

// DeployVaultContract deploys a new Ethereum contract, binding an instance of VaultContract to it.
func DeployVaultContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *VaultContract, error) {
	parsed, err := VaultContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VaultContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VaultContract{VaultContractCaller: VaultContractCaller{contract: contract}, VaultContractTransactor: VaultContractTransactor{contract: contract}, VaultContractFilterer: VaultContractFilterer{contract: contract}}, nil
}

// VaultContract is an auto generated Go binding around an Ethereum contract.
type VaultContract struct {
	VaultContractCaller     // Read-only binding to the contract
	VaultContractTransactor // Write-only binding to the contract
	VaultContractFilterer   // Log filterer for contract events
}

// VaultContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type VaultContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VaultContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VaultContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VaultContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VaultContractSession struct {
	Contract     *VaultContract    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VaultContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VaultContractCallerSession struct {
	Contract *VaultContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// VaultContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VaultContractTransactorSession struct {
	Contract     *VaultContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// VaultContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type VaultContractRaw struct {
	Contract *VaultContract // Generic contract binding to access the raw methods on
}

// VaultContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VaultContractCallerRaw struct {
	Contract *VaultContractCaller // Generic read-only contract binding to access the raw methods on
}

// VaultContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VaultContractTransactorRaw struct {
	Contract *VaultContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVaultContract creates a new instance of VaultContract, bound to a specific deployed contract.
func NewVaultContract(address common.Address, backend bind.ContractBackend) (*VaultContract, error) {
	contract, err := bindVaultContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VaultContract{VaultContractCaller: VaultContractCaller{contract: contract}, VaultContractTransactor: VaultContractTransactor{contract: contract}, VaultContractFilterer: VaultContractFilterer{contract: contract}}, nil
}

// NewVaultContractCaller creates a new read-only instance of VaultContract, bound to a specific deployed contract.
func NewVaultContractCaller(address common.Address, caller bind.ContractCaller) (*VaultContractCaller, error) {
	contract, err := bindVaultContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VaultContractCaller{contract: contract}, nil
}

// NewVaultContractTransactor creates a new write-only instance of VaultContract, bound to a specific deployed contract.
func NewVaultContractTransactor(address common.Address, transactor bind.ContractTransactor) (*VaultContractTransactor, error) {
	contract, err := bindVaultContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VaultContractTransactor{contract: contract}, nil
}

// NewVaultContractFilterer creates a new log filterer instance of VaultContract, bound to a specific deployed contract.
func NewVaultContractFilterer(address common.Address, filterer bind.ContractFilterer) (*VaultContractFilterer, error) {
	contract, err := bindVaultContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VaultContractFilterer{contract: contract}, nil
}

// bindVaultContract binds a generic wrapper to an already deployed contract.
func bindVaultContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VaultContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VaultContract *VaultContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VaultContract.Contract.VaultContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VaultContract *VaultContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VaultContract.Contract.VaultContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VaultContract *VaultContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VaultContract.Contract.VaultContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VaultContract *VaultContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VaultContract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VaultContract *VaultContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VaultContract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VaultContract *VaultContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VaultContract.Contract.contract.Transact(opts, method, params...)
}

// ActiveDeals is a free data retrieval call binding the contract method 0x8122553c.
//
// Solidity: function activeDeals(uint256 ) view returns(string)
func (_VaultContract *VaultContractCaller) ActiveDeals(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "activeDeals", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ActiveDeals is a free data retrieval call binding the contract method 0x8122553c.
//
// Solidity: function activeDeals(uint256 ) view returns(string)
func (_VaultContract *VaultContractSession) ActiveDeals(arg0 *big.Int) (string, error) {
	return _VaultContract.Contract.ActiveDeals(&_VaultContract.CallOpts, arg0)
}

// ActiveDeals is a free data retrieval call binding the contract method 0x8122553c.
//
// Solidity: function activeDeals(uint256 ) view returns(string)
func (_VaultContract *VaultContractCallerSession) ActiveDeals(arg0 *big.Int) (string, error) {
	return _VaultContract.Contract.ActiveDeals(&_VaultContract.CallOpts, arg0)
}

// CompensationAmount is a free data retrieval call binding the contract method 0xe8536d61.
//
// Solidity: function compensationAmount(string ) view returns(uint256)
func (_VaultContract *VaultContractCaller) CompensationAmount(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "compensationAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CompensationAmount is a free data retrieval call binding the contract method 0xe8536d61.
//
// Solidity: function compensationAmount(string ) view returns(uint256)
func (_VaultContract *VaultContractSession) CompensationAmount(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.CompensationAmount(&_VaultContract.CallOpts, arg0)
}

// CompensationAmount is a free data retrieval call binding the contract method 0xe8536d61.
//
// Solidity: function compensationAmount(string ) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) CompensationAmount(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.CompensationAmount(&_VaultContract.CallOpts, arg0)
}

// DealAmount is a free data retrieval call binding the contract method 0x39871114.
//
// Solidity: function dealAmount(string ) view returns(uint256)
func (_VaultContract *VaultContractCaller) DealAmount(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "dealAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DealAmount is a free data retrieval call binding the contract method 0x39871114.
//
// Solidity: function dealAmount(string ) view returns(uint256)
func (_VaultContract *VaultContractSession) DealAmount(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.DealAmount(&_VaultContract.CallOpts, arg0)
}

// DealAmount is a free data retrieval call binding the contract method 0x39871114.
//
// Solidity: function dealAmount(string ) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) DealAmount(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.DealAmount(&_VaultContract.CallOpts, arg0)
}

// DealCount is a free data retrieval call binding the contract method 0xeadb3c9c.
//
// Solidity: function dealCount() view returns(uint256)
func (_VaultContract *VaultContractCaller) DealCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "dealCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DealCount is a free data retrieval call binding the contract method 0xeadb3c9c.
//
// Solidity: function dealCount() view returns(uint256)
func (_VaultContract *VaultContractSession) DealCount() (*big.Int, error) {
	return _VaultContract.Contract.DealCount(&_VaultContract.CallOpts)
}

// DealCount is a free data retrieval call binding the contract method 0xeadb3c9c.
//
// Solidity: function dealCount() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) DealCount() (*big.Int, error) {
	return _VaultContract.Contract.DealCount(&_VaultContract.CallOpts)
}

// DealEndRound is a free data retrieval call binding the contract method 0x5b3ca015.
//
// Solidity: function dealEndRound(string ) view returns(uint256)
func (_VaultContract *VaultContractCaller) DealEndRound(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "dealEndRound", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DealEndRound is a free data retrieval call binding the contract method 0x5b3ca015.
//
// Solidity: function dealEndRound(string ) view returns(uint256)
func (_VaultContract *VaultContractSession) DealEndRound(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.DealEndRound(&_VaultContract.CallOpts, arg0)
}

// DealEndRound is a free data retrieval call binding the contract method 0x5b3ca015.
//
// Solidity: function dealEndRound(string ) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) DealEndRound(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.DealEndRound(&_VaultContract.CallOpts, arg0)
}

// DealTotal is a free data retrieval call binding the contract method 0x36677967.
//
// Solidity: function dealTotal() view returns(uint256)
func (_VaultContract *VaultContractCaller) DealTotal(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "dealTotal")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DealTotal is a free data retrieval call binding the contract method 0x36677967.
//
// Solidity: function dealTotal() view returns(uint256)
func (_VaultContract *VaultContractSession) DealTotal() (*big.Int, error) {
	return _VaultContract.Contract.DealTotal(&_VaultContract.CallOpts)
}

// DealTotal is a free data retrieval call binding the contract method 0x36677967.
//
// Solidity: function dealTotal() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) DealTotal() (*big.Int, error) {
	return _VaultContract.Contract.DealTotal(&_VaultContract.CallOpts)
}

// Deals is a free data retrieval call binding the contract method 0xa0a57dac.
//
// Solidity: function deals(string ) view returns(string id, uint256 price, uint256 quantity, uint256 duration, address client, uint8 status, uint256 startAt)
func (_VaultContract *VaultContractCaller) Deals(opts *bind.CallOpts, arg0 string) (struct {
	Id       string
	Price    *big.Int
	Quantity *big.Int
	Duration *big.Int
	Client   common.Address
	Status   uint8
	StartAt  *big.Int
}, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "deals", arg0)

	outstruct := new(struct {
		Id       string
		Price    *big.Int
		Quantity *big.Int
		Duration *big.Int
		Client   common.Address
		Status   uint8
		StartAt  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Id = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Price = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Quantity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Duration = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Client = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Status = *abi.ConvertType(out[5], new(uint8)).(*uint8)
	outstruct.StartAt = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Deals is a free data retrieval call binding the contract method 0xa0a57dac.
//
// Solidity: function deals(string ) view returns(string id, uint256 price, uint256 quantity, uint256 duration, address client, uint8 status, uint256 startAt)
func (_VaultContract *VaultContractSession) Deals(arg0 string) (struct {
	Id       string
	Price    *big.Int
	Quantity *big.Int
	Duration *big.Int
	Client   common.Address
	Status   uint8
	StartAt  *big.Int
}, error) {
	return _VaultContract.Contract.Deals(&_VaultContract.CallOpts, arg0)
}

// Deals is a free data retrieval call binding the contract method 0xa0a57dac.
//
// Solidity: function deals(string ) view returns(string id, uint256 price, uint256 quantity, uint256 duration, address client, uint8 status, uint256 startAt)
func (_VaultContract *VaultContractCallerSession) Deals(arg0 string) (struct {
	Id       string
	Price    *big.Int
	Quantity *big.Int
	Duration *big.Int
	Client   common.Address
	Status   uint8
	StartAt  *big.Int
}, error) {
	return _VaultContract.Contract.Deals(&_VaultContract.CallOpts, arg0)
}

// DelegatePaused is a free data retrieval call binding the contract method 0x953841c0.
//
// Solidity: function delegatePaused() view returns(bool)
func (_VaultContract *VaultContractCaller) DelegatePaused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "delegatePaused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DelegatePaused is a free data retrieval call binding the contract method 0x953841c0.
//
// Solidity: function delegatePaused() view returns(bool)
func (_VaultContract *VaultContractSession) DelegatePaused() (bool, error) {
	return _VaultContract.Contract.DelegatePaused(&_VaultContract.CallOpts)
}

// DelegatePaused is a free data retrieval call binding the contract method 0x953841c0.
//
// Solidity: function delegatePaused() view returns(bool)
func (_VaultContract *VaultContractCallerSession) DelegatePaused() (bool, error) {
	return _VaultContract.Contract.DelegatePaused(&_VaultContract.CallOpts)
}

// GetActiveDealIDs is a free data retrieval call binding the contract method 0xda4bafbb.
//
// Solidity: function getActiveDealIDs(uint256 start, uint256 end) view returns(string[])
func (_VaultContract *VaultContractCaller) GetActiveDealIDs(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]string, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getActiveDealIDs", start, end)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetActiveDealIDs is a free data retrieval call binding the contract method 0xda4bafbb.
//
// Solidity: function getActiveDealIDs(uint256 start, uint256 end) view returns(string[])
func (_VaultContract *VaultContractSession) GetActiveDealIDs(start *big.Int, end *big.Int) ([]string, error) {
	return _VaultContract.Contract.GetActiveDealIDs(&_VaultContract.CallOpts, start, end)
}

// GetActiveDealIDs is a free data retrieval call binding the contract method 0xda4bafbb.
//
// Solidity: function getActiveDealIDs(uint256 start, uint256 end) view returns(string[])
func (_VaultContract *VaultContractCallerSession) GetActiveDealIDs(start *big.Int, end *big.Int) ([]string, error) {
	return _VaultContract.Contract.GetActiveDealIDs(&_VaultContract.CallOpts, start, end)
}

// GetActiveDeals is a free data retrieval call binding the contract method 0x6b8b10c7.
//
// Solidity: function getActiveDeals(uint256 start, uint256 end) view returns((string,uint256,uint256,uint256,address,uint8,uint256)[])
func (_VaultContract *VaultContractCaller) GetActiveDeals(opts *bind.CallOpts, start *big.Int, end *big.Int) ([]Deal, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getActiveDeals", start, end)

	if err != nil {
		return *new([]Deal), err
	}

	out0 := *abi.ConvertType(out[0], new([]Deal)).(*[]Deal)

	return out0, err

}

// GetActiveDeals is a free data retrieval call binding the contract method 0x6b8b10c7.
//
// Solidity: function getActiveDeals(uint256 start, uint256 end) view returns((string,uint256,uint256,uint256,address,uint8,uint256)[])
func (_VaultContract *VaultContractSession) GetActiveDeals(start *big.Int, end *big.Int) ([]Deal, error) {
	return _VaultContract.Contract.GetActiveDeals(&_VaultContract.CallOpts, start, end)
}

// GetActiveDeals is a free data retrieval call binding the contract method 0x6b8b10c7.
//
// Solidity: function getActiveDeals(uint256 start, uint256 end) view returns((string,uint256,uint256,uint256,address,uint8,uint256)[])
func (_VaultContract *VaultContractCallerSession) GetActiveDeals(start *big.Int, end *big.Int) ([]Deal, error) {
	return _VaultContract.Contract.GetActiveDeals(&_VaultContract.CallOpts, start, end)
}

// GetActiveDealsCount is a free data retrieval call binding the contract method 0xd57398f6.
//
// Solidity: function getActiveDealsCount() view returns(uint256)
func (_VaultContract *VaultContractCaller) GetActiveDealsCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getActiveDealsCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetActiveDealsCount is a free data retrieval call binding the contract method 0xd57398f6.
//
// Solidity: function getActiveDealsCount() view returns(uint256)
func (_VaultContract *VaultContractSession) GetActiveDealsCount() (*big.Int, error) {
	return _VaultContract.Contract.GetActiveDealsCount(&_VaultContract.CallOpts)
}

// GetActiveDealsCount is a free data retrieval call binding the contract method 0xd57398f6.
//
// Solidity: function getActiveDealsCount() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) GetActiveDealsCount() (*big.Int, error) {
	return _VaultContract.Contract.GetActiveDealsCount(&_VaultContract.CallOpts)
}

// GetCompensationAmount is a free data retrieval call binding the contract method 0x381cbd51.
//
// Solidity: function getCompensationAmount(string dealID) view returns(uint256)
func (_VaultContract *VaultContractCaller) GetCompensationAmount(opts *bind.CallOpts, dealID string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getCompensationAmount", dealID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCompensationAmount is a free data retrieval call binding the contract method 0x381cbd51.
//
// Solidity: function getCompensationAmount(string dealID) view returns(uint256)
func (_VaultContract *VaultContractSession) GetCompensationAmount(dealID string) (*big.Int, error) {
	return _VaultContract.Contract.GetCompensationAmount(&_VaultContract.CallOpts, dealID)
}

// GetCompensationAmount is a free data retrieval call binding the contract method 0x381cbd51.
//
// Solidity: function getCompensationAmount(string dealID) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) GetCompensationAmount(dealID string) (*big.Int, error) {
	return _VaultContract.Contract.GetCompensationAmount(&_VaultContract.CallOpts, dealID)
}

// GetDeal is a free data retrieval call binding the contract method 0xe7079180.
//
// Solidity: function getDeal(string dealID) view returns((string,uint256,uint256,uint256,address,uint8,uint256))
func (_VaultContract *VaultContractCaller) GetDeal(opts *bind.CallOpts, dealID string) (Deal, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getDeal", dealID)

	if err != nil {
		return *new(Deal), err
	}

	out0 := *abi.ConvertType(out[0], new(Deal)).(*Deal)

	return out0, err

}

// GetDeal is a free data retrieval call binding the contract method 0xe7079180.
//
// Solidity: function getDeal(string dealID) view returns((string,uint256,uint256,uint256,address,uint8,uint256))
func (_VaultContract *VaultContractSession) GetDeal(dealID string) (Deal, error) {
	return _VaultContract.Contract.GetDeal(&_VaultContract.CallOpts, dealID)
}

// GetDeal is a free data retrieval call binding the contract method 0xe7079180.
//
// Solidity: function getDeal(string dealID) view returns((string,uint256,uint256,uint256,address,uint8,uint256))
func (_VaultContract *VaultContractCallerSession) GetDeal(dealID string) (Deal, error) {
	return _VaultContract.Contract.GetDeal(&_VaultContract.CallOpts, dealID)
}

// GetDealTotal is a free data retrieval call binding the contract method 0x9105e84c.
//
// Solidity: function getDealTotal() view returns(uint256)
func (_VaultContract *VaultContractCaller) GetDealTotal(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getDealTotal")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDealTotal is a free data retrieval call binding the contract method 0x9105e84c.
//
// Solidity: function getDealTotal() view returns(uint256)
func (_VaultContract *VaultContractSession) GetDealTotal() (*big.Int, error) {
	return _VaultContract.Contract.GetDealTotal(&_VaultContract.CallOpts)
}

// GetDealTotal is a free data retrieval call binding the contract method 0x9105e84c.
//
// Solidity: function getDealTotal() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) GetDealTotal() (*big.Int, error) {
	return _VaultContract.Contract.GetDealTotal(&_VaultContract.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_VaultContract *VaultContractCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_VaultContract *VaultContractSession) GetOwner() (common.Address, error) {
	return _VaultContract.Contract.GetOwner(&_VaultContract.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_VaultContract *VaultContractCallerSession) GetOwner() (common.Address, error) {
	return _VaultContract.Contract.GetOwner(&_VaultContract.CallOpts)
}

// GetSlashCount is a free data retrieval call binding the contract method 0x9ca998c7.
//
// Solidity: function getSlashCount(string dealID) view returns(uint256)
func (_VaultContract *VaultContractCaller) GetSlashCount(opts *bind.CallOpts, dealID string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getSlashCount", dealID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSlashCount is a free data retrieval call binding the contract method 0x9ca998c7.
//
// Solidity: function getSlashCount(string dealID) view returns(uint256)
func (_VaultContract *VaultContractSession) GetSlashCount(dealID string) (*big.Int, error) {
	return _VaultContract.Contract.GetSlashCount(&_VaultContract.CallOpts, dealID)
}

// GetSlashCount is a free data retrieval call binding the contract method 0x9ca998c7.
//
// Solidity: function getSlashCount(string dealID) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) GetSlashCount(dealID string) (*big.Int, error) {
	return _VaultContract.Contract.GetSlashCount(&_VaultContract.CallOpts, dealID)
}

// GetTotalCollateral is a free data retrieval call binding the contract method 0xd6eb5910.
//
// Solidity: function getTotalCollateral() view returns(uint256)
func (_VaultContract *VaultContractCaller) GetTotalCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getTotalCollateral")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalCollateral is a free data retrieval call binding the contract method 0xd6eb5910.
//
// Solidity: function getTotalCollateral() view returns(uint256)
func (_VaultContract *VaultContractSession) GetTotalCollateral() (*big.Int, error) {
	return _VaultContract.Contract.GetTotalCollateral(&_VaultContract.CallOpts)
}

// GetTotalCollateral is a free data retrieval call binding the contract method 0xd6eb5910.
//
// Solidity: function getTotalCollateral() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) GetTotalCollateral() (*big.Int, error) {
	return _VaultContract.Contract.GetTotalCollateral(&_VaultContract.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(string)
func (_VaultContract *VaultContractCaller) GetVersion(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "getVersion")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(string)
func (_VaultContract *VaultContractSession) GetVersion() (string, error) {
	return _VaultContract.Contract.GetVersion(&_VaultContract.CallOpts)
}

// GetVersion is a free data retrieval call binding the contract method 0x0d8e6e2c.
//
// Solidity: function getVersion() pure returns(string)
func (_VaultContract *VaultContractCallerSession) GetVersion() (string, error) {
	return _VaultContract.Contract.GetVersion(&_VaultContract.CallOpts)
}

// LastRewardRound is a free data retrieval call binding the contract method 0xed931da2.
//
// Solidity: function lastRewardRound(string ) view returns(uint256)
func (_VaultContract *VaultContractCaller) LastRewardRound(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "lastRewardRound", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastRewardRound is a free data retrieval call binding the contract method 0xed931da2.
//
// Solidity: function lastRewardRound(string ) view returns(uint256)
func (_VaultContract *VaultContractSession) LastRewardRound(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.LastRewardRound(&_VaultContract.CallOpts, arg0)
}

// LastRewardRound is a free data retrieval call binding the contract method 0xed931da2.
//
// Solidity: function lastRewardRound(string ) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) LastRewardRound(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.LastRewardRound(&_VaultContract.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_VaultContract *VaultContractCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_VaultContract *VaultContractSession) Owner() (common.Address, error) {
	return _VaultContract.Contract.Owner(&_VaultContract.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_VaultContract *VaultContractCallerSession) Owner() (common.Address, error) {
	return _VaultContract.Contract.Owner(&_VaultContract.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_VaultContract *VaultContractCaller) PaymentToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "paymentToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_VaultContract *VaultContractSession) PaymentToken() (common.Address, error) {
	return _VaultContract.Contract.PaymentToken(&_VaultContract.CallOpts)
}

// PaymentToken is a free data retrieval call binding the contract method 0x3013ce29.
//
// Solidity: function paymentToken() view returns(address)
func (_VaultContract *VaultContractCallerSession) PaymentToken() (common.Address, error) {
	return _VaultContract.Contract.PaymentToken(&_VaultContract.CallOpts)
}

// RequestedWithdrawAmount is a free data retrieval call binding the contract method 0x7d001fba.
//
// Solidity: function requestedWithdrawAmount() view returns(uint256)
func (_VaultContract *VaultContractCaller) RequestedWithdrawAmount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "requestedWithdrawAmount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestedWithdrawAmount is a free data retrieval call binding the contract method 0x7d001fba.
//
// Solidity: function requestedWithdrawAmount() view returns(uint256)
func (_VaultContract *VaultContractSession) RequestedWithdrawAmount() (*big.Int, error) {
	return _VaultContract.Contract.RequestedWithdrawAmount(&_VaultContract.CallOpts)
}

// RequestedWithdrawAmount is a free data retrieval call binding the contract method 0x7d001fba.
//
// Solidity: function requestedWithdrawAmount() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) RequestedWithdrawAmount() (*big.Int, error) {
	return _VaultContract.Contract.RequestedWithdrawAmount(&_VaultContract.CallOpts)
}

// RequestedWithdrawUnlockTimestamp is a free data retrieval call binding the contract method 0xd1c73f2c.
//
// Solidity: function requestedWithdrawUnlockTimestamp() view returns(uint256)
func (_VaultContract *VaultContractCaller) RequestedWithdrawUnlockTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "requestedWithdrawUnlockTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestedWithdrawUnlockTimestamp is a free data retrieval call binding the contract method 0xd1c73f2c.
//
// Solidity: function requestedWithdrawUnlockTimestamp() view returns(uint256)
func (_VaultContract *VaultContractSession) RequestedWithdrawUnlockTimestamp() (*big.Int, error) {
	return _VaultContract.Contract.RequestedWithdrawUnlockTimestamp(&_VaultContract.CallOpts)
}

// RequestedWithdrawUnlockTimestamp is a free data retrieval call binding the contract method 0xd1c73f2c.
//
// Solidity: function requestedWithdrawUnlockTimestamp() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) RequestedWithdrawUnlockTimestamp() (*big.Int, error) {
	return _VaultContract.Contract.RequestedWithdrawUnlockTimestamp(&_VaultContract.CallOpts)
}

// SlashCount is a free data retrieval call binding the contract method 0xc3358120.
//
// Solidity: function slashCount(string ) view returns(uint256)
func (_VaultContract *VaultContractCaller) SlashCount(opts *bind.CallOpts, arg0 string) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "slashCount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashCount is a free data retrieval call binding the contract method 0xc3358120.
//
// Solidity: function slashCount(string ) view returns(uint256)
func (_VaultContract *VaultContractSession) SlashCount(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.SlashCount(&_VaultContract.CallOpts, arg0)
}

// SlashCount is a free data retrieval call binding the contract method 0xc3358120.
//
// Solidity: function slashCount(string ) view returns(uint256)
func (_VaultContract *VaultContractCallerSession) SlashCount(arg0 string) (*big.Int, error) {
	return _VaultContract.Contract.SlashCount(&_VaultContract.CallOpts, arg0)
}

// TotalCollateral is a free data retrieval call binding the contract method 0x4ac8eb5f.
//
// Solidity: function totalCollateral() view returns(uint256)
func (_VaultContract *VaultContractCaller) TotalCollateral(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "totalCollateral")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalCollateral is a free data retrieval call binding the contract method 0x4ac8eb5f.
//
// Solidity: function totalCollateral() view returns(uint256)
func (_VaultContract *VaultContractSession) TotalCollateral() (*big.Int, error) {
	return _VaultContract.Contract.TotalCollateral(&_VaultContract.CallOpts)
}

// TotalCollateral is a free data retrieval call binding the contract method 0x4ac8eb5f.
//
// Solidity: function totalCollateral() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) TotalCollateral() (*big.Int, error) {
	return _VaultContract.Contract.TotalCollateral(&_VaultContract.CallOpts)
}

// TotalCompensation is a free data retrieval call binding the contract method 0xf3e9bc28.
//
// Solidity: function totalCompensation() view returns(uint256)
func (_VaultContract *VaultContractCaller) TotalCompensation(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "totalCompensation")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalCompensation is a free data retrieval call binding the contract method 0xf3e9bc28.
//
// Solidity: function totalCompensation() view returns(uint256)
func (_VaultContract *VaultContractSession) TotalCompensation() (*big.Int, error) {
	return _VaultContract.Contract.TotalCompensation(&_VaultContract.CallOpts)
}

// TotalCompensation is a free data retrieval call binding the contract method 0xf3e9bc28.
//
// Solidity: function totalCompensation() view returns(uint256)
func (_VaultContract *VaultContractCallerSession) TotalCompensation() (*big.Int, error) {
	return _VaultContract.Contract.TotalCompensation(&_VaultContract.CallOpts)
}

// VaultManager is a free data retrieval call binding the contract method 0x8a4adf24.
//
// Solidity: function vaultManager() view returns(address)
func (_VaultContract *VaultContractCaller) VaultManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VaultContract.contract.Call(opts, &out, "vaultManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VaultManager is a free data retrieval call binding the contract method 0x8a4adf24.
//
// Solidity: function vaultManager() view returns(address)
func (_VaultContract *VaultContractSession) VaultManager() (common.Address, error) {
	return _VaultContract.Contract.VaultManager(&_VaultContract.CallOpts)
}

// VaultManager is a free data retrieval call binding the contract method 0x8a4adf24.
//
// Solidity: function vaultManager() view returns(address)
func (_VaultContract *VaultContractCallerSession) VaultManager() (common.Address, error) {
	return _VaultContract.Contract.VaultManager(&_VaultContract.CallOpts)
}

// CancelDeal is a paid mutator transaction binding the contract method 0xf3227dc4.
//
// Solidity: function cancelDeal(string dealID) returns()
func (_VaultContract *VaultContractTransactor) CancelDeal(opts *bind.TransactOpts, dealID string) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "cancelDeal", dealID)
}

// CancelDeal is a paid mutator transaction binding the contract method 0xf3227dc4.
//
// Solidity: function cancelDeal(string dealID) returns()
func (_VaultContract *VaultContractSession) CancelDeal(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.CancelDeal(&_VaultContract.TransactOpts, dealID)
}

// CancelDeal is a paid mutator transaction binding the contract method 0xf3227dc4.
//
// Solidity: function cancelDeal(string dealID) returns()
func (_VaultContract *VaultContractTransactorSession) CancelDeal(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.CancelDeal(&_VaultContract.TransactOpts, dealID)
}

// CancelWithdraw is a paid mutator transaction binding the contract method 0x84b76824.
//
// Solidity: function cancelWithdraw() returns()
func (_VaultContract *VaultContractTransactor) CancelWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "cancelWithdraw")
}

// CancelWithdraw is a paid mutator transaction binding the contract method 0x84b76824.
//
// Solidity: function cancelWithdraw() returns()
func (_VaultContract *VaultContractSession) CancelWithdraw() (*types.Transaction, error) {
	return _VaultContract.Contract.CancelWithdraw(&_VaultContract.TransactOpts)
}

// CancelWithdraw is a paid mutator transaction binding the contract method 0x84b76824.
//
// Solidity: function cancelWithdraw() returns()
func (_VaultContract *VaultContractTransactorSession) CancelWithdraw() (*types.Transaction, error) {
	return _VaultContract.Contract.CancelWithdraw(&_VaultContract.TransactOpts)
}

// ClaimCompensation is a paid mutator transaction binding the contract method 0x2e18c59a.
//
// Solidity: function claimCompensation(string dealID) returns()
func (_VaultContract *VaultContractTransactor) ClaimCompensation(opts *bind.TransactOpts, dealID string) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "claimCompensation", dealID)
}

// ClaimCompensation is a paid mutator transaction binding the contract method 0x2e18c59a.
//
// Solidity: function claimCompensation(string dealID) returns()
func (_VaultContract *VaultContractSession) ClaimCompensation(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.ClaimCompensation(&_VaultContract.TransactOpts, dealID)
}

// ClaimCompensation is a paid mutator transaction binding the contract method 0x2e18c59a.
//
// Solidity: function claimCompensation(string dealID) returns()
func (_VaultContract *VaultContractTransactorSession) ClaimCompensation(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.ClaimCompensation(&_VaultContract.TransactOpts, dealID)
}

// ClaimReward is a paid mutator transaction binding the contract method 0xbb8c9797.
//
// Solidity: function claimReward(string dealID) returns()
func (_VaultContract *VaultContractTransactor) ClaimReward(opts *bind.TransactOpts, dealID string) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "claimReward", dealID)
}

// ClaimReward is a paid mutator transaction binding the contract method 0xbb8c9797.
//
// Solidity: function claimReward(string dealID) returns()
func (_VaultContract *VaultContractSession) ClaimReward(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.ClaimReward(&_VaultContract.TransactOpts, dealID)
}

// ClaimReward is a paid mutator transaction binding the contract method 0xbb8c9797.
//
// Solidity: function claimReward(string dealID) returns()
func (_VaultContract *VaultContractTransactorSession) ClaimReward(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.ClaimReward(&_VaultContract.TransactOpts, dealID)
}

// ConfirmWithdraw is a paid mutator transaction binding the contract method 0x68124f9a.
//
// Solidity: function confirmWithdraw() returns()
func (_VaultContract *VaultContractTransactor) ConfirmWithdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "confirmWithdraw")
}

// ConfirmWithdraw is a paid mutator transaction binding the contract method 0x68124f9a.
//
// Solidity: function confirmWithdraw() returns()
func (_VaultContract *VaultContractSession) ConfirmWithdraw() (*types.Transaction, error) {
	return _VaultContract.Contract.ConfirmWithdraw(&_VaultContract.TransactOpts)
}

// ConfirmWithdraw is a paid mutator transaction binding the contract method 0x68124f9a.
//
// Solidity: function confirmWithdraw() returns()
func (_VaultContract *VaultContractTransactorSession) ConfirmWithdraw() (*types.Transaction, error) {
	return _VaultContract.Contract.ConfirmWithdraw(&_VaultContract.TransactOpts)
}

// CreateDeal is a paid mutator transaction binding the contract method 0xbd543c4e.
//
// Solidity: function createDeal(string _dealID, uint256 _price, uint256 _quantity, uint256 _duration, address _client) returns(string)
func (_VaultContract *VaultContractTransactor) CreateDeal(opts *bind.TransactOpts, _dealID string, _price *big.Int, _quantity *big.Int, _duration *big.Int, _client common.Address) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "createDeal", _dealID, _price, _quantity, _duration, _client)
}

// CreateDeal is a paid mutator transaction binding the contract method 0xbd543c4e.
//
// Solidity: function createDeal(string _dealID, uint256 _price, uint256 _quantity, uint256 _duration, address _client) returns(string)
func (_VaultContract *VaultContractSession) CreateDeal(_dealID string, _price *big.Int, _quantity *big.Int, _duration *big.Int, _client common.Address) (*types.Transaction, error) {
	return _VaultContract.Contract.CreateDeal(&_VaultContract.TransactOpts, _dealID, _price, _quantity, _duration, _client)
}

// CreateDeal is a paid mutator transaction binding the contract method 0xbd543c4e.
//
// Solidity: function createDeal(string _dealID, uint256 _price, uint256 _quantity, uint256 _duration, address _client) returns(string)
func (_VaultContract *VaultContractTransactorSession) CreateDeal(_dealID string, _price *big.Int, _quantity *big.Int, _duration *big.Int, _client common.Address) (*types.Transaction, error) {
	return _VaultContract.Contract.CreateDeal(&_VaultContract.TransactOpts, _dealID, _price, _quantity, _duration, _client)
}

// Delegate is a paid mutator transaction binding the contract method 0x9fa6dd35.
//
// Solidity: function delegate(uint256 delegateAmount) returns()
func (_VaultContract *VaultContractTransactor) Delegate(opts *bind.TransactOpts, delegateAmount *big.Int) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "delegate", delegateAmount)
}

// Delegate is a paid mutator transaction binding the contract method 0x9fa6dd35.
//
// Solidity: function delegate(uint256 delegateAmount) returns()
func (_VaultContract *VaultContractSession) Delegate(delegateAmount *big.Int) (*types.Transaction, error) {
	return _VaultContract.Contract.Delegate(&_VaultContract.TransactOpts, delegateAmount)
}

// Delegate is a paid mutator transaction binding the contract method 0x9fa6dd35.
//
// Solidity: function delegate(uint256 delegateAmount) returns()
func (_VaultContract *VaultContractTransactorSession) Delegate(delegateAmount *big.Int) (*types.Transaction, error) {
	return _VaultContract.Contract.Delegate(&_VaultContract.TransactOpts, delegateAmount)
}

// Initialize is a paid mutator transaction binding the contract method 0xfecf9734.
//
// Solidity: function initialize(address _vaultManager, address _vaultOwner, address _paymentToken, bool _delegatePaused) returns()
func (_VaultContract *VaultContractTransactor) Initialize(opts *bind.TransactOpts, _vaultManager common.Address, _vaultOwner common.Address, _paymentToken common.Address, _delegatePaused bool) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "initialize", _vaultManager, _vaultOwner, _paymentToken, _delegatePaused)
}

// Initialize is a paid mutator transaction binding the contract method 0xfecf9734.
//
// Solidity: function initialize(address _vaultManager, address _vaultOwner, address _paymentToken, bool _delegatePaused) returns()
func (_VaultContract *VaultContractSession) Initialize(_vaultManager common.Address, _vaultOwner common.Address, _paymentToken common.Address, _delegatePaused bool) (*types.Transaction, error) {
	return _VaultContract.Contract.Initialize(&_VaultContract.TransactOpts, _vaultManager, _vaultOwner, _paymentToken, _delegatePaused)
}

// Initialize is a paid mutator transaction binding the contract method 0xfecf9734.
//
// Solidity: function initialize(address _vaultManager, address _vaultOwner, address _paymentToken, bool _delegatePaused) returns()
func (_VaultContract *VaultContractTransactorSession) Initialize(_vaultManager common.Address, _vaultOwner common.Address, _paymentToken common.Address, _delegatePaused bool) (*types.Transaction, error) {
	return _VaultContract.Contract.Initialize(&_VaultContract.TransactOpts, _vaultManager, _vaultOwner, _paymentToken, _delegatePaused)
}

// PayDeal is a paid mutator transaction binding the contract method 0x0ca6aa79.
//
// Solidity: function payDeal(string dealID) returns()
func (_VaultContract *VaultContractTransactor) PayDeal(opts *bind.TransactOpts, dealID string) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "payDeal", dealID)
}

// PayDeal is a paid mutator transaction binding the contract method 0x0ca6aa79.
//
// Solidity: function payDeal(string dealID) returns()
func (_VaultContract *VaultContractSession) PayDeal(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.PayDeal(&_VaultContract.TransactOpts, dealID)
}

// PayDeal is a paid mutator transaction binding the contract method 0x0ca6aa79.
//
// Solidity: function payDeal(string dealID) returns()
func (_VaultContract *VaultContractTransactorSession) PayDeal(dealID string) (*types.Transaction, error) {
	return _VaultContract.Contract.PayDeal(&_VaultContract.TransactOpts, dealID)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_VaultContract *VaultContractTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_VaultContract *VaultContractSession) RenounceOwnership() (*types.Transaction, error) {
	return _VaultContract.Contract.RenounceOwnership(&_VaultContract.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_VaultContract *VaultContractTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _VaultContract.Contract.RenounceOwnership(&_VaultContract.TransactOpts)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x45a5559a.
//
// Solidity: function requestWithdraw(uint256 tokenAmount, uint256 withdrawDelay, string[] dealIDs) returns()
func (_VaultContract *VaultContractTransactor) RequestWithdraw(opts *bind.TransactOpts, tokenAmount *big.Int, withdrawDelay *big.Int, dealIDs []string) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "requestWithdraw", tokenAmount, withdrawDelay, dealIDs)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x45a5559a.
//
// Solidity: function requestWithdraw(uint256 tokenAmount, uint256 withdrawDelay, string[] dealIDs) returns()
func (_VaultContract *VaultContractSession) RequestWithdraw(tokenAmount *big.Int, withdrawDelay *big.Int, dealIDs []string) (*types.Transaction, error) {
	return _VaultContract.Contract.RequestWithdraw(&_VaultContract.TransactOpts, tokenAmount, withdrawDelay, dealIDs)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x45a5559a.
//
// Solidity: function requestWithdraw(uint256 tokenAmount, uint256 withdrawDelay, string[] dealIDs) returns()
func (_VaultContract *VaultContractTransactorSession) RequestWithdraw(tokenAmount *big.Int, withdrawDelay *big.Int, dealIDs []string) (*types.Transaction, error) {
	return _VaultContract.Contract.RequestWithdraw(&_VaultContract.TransactOpts, tokenAmount, withdrawDelay, dealIDs)
}

// Slash is a paid mutator transaction binding the contract method 0x6bc37315.
//
// Solidity: function slash(string dealID, uint256 slashAmount) returns()
func (_VaultContract *VaultContractTransactor) Slash(opts *bind.TransactOpts, dealID string, slashAmount *big.Int) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "slash", dealID, slashAmount)
}

// Slash is a paid mutator transaction binding the contract method 0x6bc37315.
//
// Solidity: function slash(string dealID, uint256 slashAmount) returns()
func (_VaultContract *VaultContractSession) Slash(dealID string, slashAmount *big.Int) (*types.Transaction, error) {
	return _VaultContract.Contract.Slash(&_VaultContract.TransactOpts, dealID, slashAmount)
}

// Slash is a paid mutator transaction binding the contract method 0x6bc37315.
//
// Solidity: function slash(string dealID, uint256 slashAmount) returns()
func (_VaultContract *VaultContractTransactorSession) Slash(dealID string, slashAmount *big.Int) (*types.Transaction, error) {
	return _VaultContract.Contract.Slash(&_VaultContract.TransactOpts, dealID, slashAmount)
}

// ToggleDelegatePause is a paid mutator transaction binding the contract method 0x06d3b280.
//
// Solidity: function toggleDelegatePause() returns()
func (_VaultContract *VaultContractTransactor) ToggleDelegatePause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "toggleDelegatePause")
}

// ToggleDelegatePause is a paid mutator transaction binding the contract method 0x06d3b280.
//
// Solidity: function toggleDelegatePause() returns()
func (_VaultContract *VaultContractSession) ToggleDelegatePause() (*types.Transaction, error) {
	return _VaultContract.Contract.ToggleDelegatePause(&_VaultContract.TransactOpts)
}

// ToggleDelegatePause is a paid mutator transaction binding the contract method 0x06d3b280.
//
// Solidity: function toggleDelegatePause() returns()
func (_VaultContract *VaultContractTransactorSession) ToggleDelegatePause() (*types.Transaction, error) {
	return _VaultContract.Contract.ToggleDelegatePause(&_VaultContract.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_VaultContract *VaultContractTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _VaultContract.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_VaultContract *VaultContractSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VaultContract.Contract.TransferOwnership(&_VaultContract.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_VaultContract *VaultContractTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VaultContract.Contract.TransferOwnership(&_VaultContract.TransactOpts, newOwner)
}

// VaultContractDealActivatedIterator is returned from FilterDealActivated and is used to iterate over the raw logs and unpacked data for DealActivated events raised by the VaultContract contract.
type VaultContractDealActivatedIterator struct {
	Event *VaultContractDealActivated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractDealActivatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractDealActivated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractDealActivated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractDealActivatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractDealActivatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractDealActivated represents a DealActivated event raised by the VaultContract contract.
type VaultContractDealActivated struct {
	DealID      string
	DealPayment *big.Int
	Client      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDealActivated is a free log retrieval operation binding the contract event 0x71a59c69486d39707074574bcea523028805b0015d3f87aa6a2bf44281e7639f.
//
// Solidity: event DealActivated(string dealID, uint256 dealPayment, address client)
func (_VaultContract *VaultContractFilterer) FilterDealActivated(opts *bind.FilterOpts) (*VaultContractDealActivatedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "DealActivated")
	if err != nil {
		return nil, err
	}
	return &VaultContractDealActivatedIterator{contract: _VaultContract.contract, event: "DealActivated", logs: logs, sub: sub}, nil
}

// WatchDealActivated is a free log subscription operation binding the contract event 0x71a59c69486d39707074574bcea523028805b0015d3f87aa6a2bf44281e7639f.
//
// Solidity: event DealActivated(string dealID, uint256 dealPayment, address client)
func (_VaultContract *VaultContractFilterer) WatchDealActivated(opts *bind.WatchOpts, sink chan<- *VaultContractDealActivated) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "DealActivated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractDealActivated)
				if err := _VaultContract.contract.UnpackLog(event, "DealActivated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealActivated is a log parse operation binding the contract event 0x71a59c69486d39707074574bcea523028805b0015d3f87aa6a2bf44281e7639f.
//
// Solidity: event DealActivated(string dealID, uint256 dealPayment, address client)
func (_VaultContract *VaultContractFilterer) ParseDealActivated(log types.Log) (*VaultContractDealActivated, error) {
	event := new(VaultContractDealActivated)
	if err := _VaultContract.contract.UnpackLog(event, "DealActivated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractDealCancelledIterator is returned from FilterDealCancelled and is used to iterate over the raw logs and unpacked data for DealCancelled events raised by the VaultContract contract.
type VaultContractDealCancelledIterator struct {
	Event *VaultContractDealCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractDealCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractDealCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractDealCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractDealCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractDealCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractDealCancelled represents a DealCancelled event raised by the VaultContract contract.
type VaultContractDealCancelled struct {
	DealID string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDealCancelled is a free log retrieval operation binding the contract event 0xe564eacc57766274b4b10cbc411538b655dff38244c0216baab5d8e013205b54.
//
// Solidity: event DealCancelled(string dealID)
func (_VaultContract *VaultContractFilterer) FilterDealCancelled(opts *bind.FilterOpts) (*VaultContractDealCancelledIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "DealCancelled")
	if err != nil {
		return nil, err
	}
	return &VaultContractDealCancelledIterator{contract: _VaultContract.contract, event: "DealCancelled", logs: logs, sub: sub}, nil
}

// WatchDealCancelled is a free log subscription operation binding the contract event 0xe564eacc57766274b4b10cbc411538b655dff38244c0216baab5d8e013205b54.
//
// Solidity: event DealCancelled(string dealID)
func (_VaultContract *VaultContractFilterer) WatchDealCancelled(opts *bind.WatchOpts, sink chan<- *VaultContractDealCancelled) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "DealCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractDealCancelled)
				if err := _VaultContract.contract.UnpackLog(event, "DealCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealCancelled is a log parse operation binding the contract event 0xe564eacc57766274b4b10cbc411538b655dff38244c0216baab5d8e013205b54.
//
// Solidity: event DealCancelled(string dealID)
func (_VaultContract *VaultContractFilterer) ParseDealCancelled(log types.Log) (*VaultContractDealCancelled, error) {
	event := new(VaultContractDealCancelled)
	if err := _VaultContract.contract.UnpackLog(event, "DealCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractDealCompletedIterator is returned from FilterDealCompleted and is used to iterate over the raw logs and unpacked data for DealCompleted events raised by the VaultContract contract.
type VaultContractDealCompletedIterator struct {
	Event *VaultContractDealCompleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractDealCompletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractDealCompleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractDealCompleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractDealCompletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractDealCompletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractDealCompleted represents a DealCompleted event raised by the VaultContract contract.
type VaultContractDealCompleted struct {
	DealID string
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDealCompleted is a free log retrieval operation binding the contract event 0x77eb1adb3703e1fceb722037009d71a45fae2b1e05434ee20e69ed1fc32c9df3.
//
// Solidity: event DealCompleted(string dealID)
func (_VaultContract *VaultContractFilterer) FilterDealCompleted(opts *bind.FilterOpts) (*VaultContractDealCompletedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "DealCompleted")
	if err != nil {
		return nil, err
	}
	return &VaultContractDealCompletedIterator{contract: _VaultContract.contract, event: "DealCompleted", logs: logs, sub: sub}, nil
}

// WatchDealCompleted is a free log subscription operation binding the contract event 0x77eb1adb3703e1fceb722037009d71a45fae2b1e05434ee20e69ed1fc32c9df3.
//
// Solidity: event DealCompleted(string dealID)
func (_VaultContract *VaultContractFilterer) WatchDealCompleted(opts *bind.WatchOpts, sink chan<- *VaultContractDealCompleted) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "DealCompleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractDealCompleted)
				if err := _VaultContract.contract.UnpackLog(event, "DealCompleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealCompleted is a log parse operation binding the contract event 0x77eb1adb3703e1fceb722037009d71a45fae2b1e05434ee20e69ed1fc32c9df3.
//
// Solidity: event DealCompleted(string dealID)
func (_VaultContract *VaultContractFilterer) ParseDealCompleted(log types.Log) (*VaultContractDealCompleted, error) {
	event := new(VaultContractDealCompleted)
	if err := _VaultContract.contract.UnpackLog(event, "DealCompleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractDealCreatedIterator is returned from FilterDealCreated and is used to iterate over the raw logs and unpacked data for DealCreated events raised by the VaultContract contract.
type VaultContractDealCreatedIterator struct {
	Event *VaultContractDealCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractDealCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractDealCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractDealCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractDealCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractDealCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractDealCreated represents a DealCreated event raised by the VaultContract contract.
type VaultContractDealCreated struct {
	DealID   string
	Quantity *big.Int
	Duration *big.Int
	Client   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDealCreated is a free log retrieval operation binding the contract event 0x018b5babd4090c89601b261a977230da8c20221a4f1489500ced9b7baa633e0c.
//
// Solidity: event DealCreated(string dealID, uint256 quantity, uint256 duration, address client)
func (_VaultContract *VaultContractFilterer) FilterDealCreated(opts *bind.FilterOpts) (*VaultContractDealCreatedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "DealCreated")
	if err != nil {
		return nil, err
	}
	return &VaultContractDealCreatedIterator{contract: _VaultContract.contract, event: "DealCreated", logs: logs, sub: sub}, nil
}

// WatchDealCreated is a free log subscription operation binding the contract event 0x018b5babd4090c89601b261a977230da8c20221a4f1489500ced9b7baa633e0c.
//
// Solidity: event DealCreated(string dealID, uint256 quantity, uint256 duration, address client)
func (_VaultContract *VaultContractFilterer) WatchDealCreated(opts *bind.WatchOpts, sink chan<- *VaultContractDealCreated) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "DealCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractDealCreated)
				if err := _VaultContract.contract.UnpackLog(event, "DealCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealCreated is a log parse operation binding the contract event 0x018b5babd4090c89601b261a977230da8c20221a4f1489500ced9b7baa633e0c.
//
// Solidity: event DealCreated(string dealID, uint256 quantity, uint256 duration, address client)
func (_VaultContract *VaultContractFilterer) ParseDealCreated(log types.Log) (*VaultContractDealCreated, error) {
	event := new(VaultContractDealCreated)
	if err := _VaultContract.contract.UnpackLog(event, "DealCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractDealTerminatedIterator is returned from FilterDealTerminated and is used to iterate over the raw logs and unpacked data for DealTerminated events raised by the VaultContract contract.
type VaultContractDealTerminatedIterator struct {
	Event *VaultContractDealTerminated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractDealTerminatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractDealTerminated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractDealTerminated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractDealTerminatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractDealTerminatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractDealTerminated represents a DealTerminated event raised by the VaultContract contract.
type VaultContractDealTerminated struct {
	DealID          string
	CompensationFee *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDealTerminated is a free log retrieval operation binding the contract event 0xa95dcc04e9a491d9257759fea6f92d2ef4815cd46575ed388b45d75d8f39d109.
//
// Solidity: event DealTerminated(string dealID, uint256 compensationFee)
func (_VaultContract *VaultContractFilterer) FilterDealTerminated(opts *bind.FilterOpts) (*VaultContractDealTerminatedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "DealTerminated")
	if err != nil {
		return nil, err
	}
	return &VaultContractDealTerminatedIterator{contract: _VaultContract.contract, event: "DealTerminated", logs: logs, sub: sub}, nil
}

// WatchDealTerminated is a free log subscription operation binding the contract event 0xa95dcc04e9a491d9257759fea6f92d2ef4815cd46575ed388b45d75d8f39d109.
//
// Solidity: event DealTerminated(string dealID, uint256 compensationFee)
func (_VaultContract *VaultContractFilterer) WatchDealTerminated(opts *bind.WatchOpts, sink chan<- *VaultContractDealTerminated) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "DealTerminated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractDealTerminated)
				if err := _VaultContract.contract.UnpackLog(event, "DealTerminated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealTerminated is a log parse operation binding the contract event 0xa95dcc04e9a491d9257759fea6f92d2ef4815cd46575ed388b45d75d8f39d109.
//
// Solidity: event DealTerminated(string dealID, uint256 compensationFee)
func (_VaultContract *VaultContractFilterer) ParseDealTerminated(log types.Log) (*VaultContractDealTerminated, error) {
	event := new(VaultContractDealTerminated)
	if err := _VaultContract.contract.UnpackLog(event, "DealTerminated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractDelegatePausedChangedIterator is returned from FilterDelegatePausedChanged and is used to iterate over the raw logs and unpacked data for DelegatePausedChanged events raised by the VaultContract contract.
type VaultContractDelegatePausedChangedIterator struct {
	Event *VaultContractDelegatePausedChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractDelegatePausedChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractDelegatePausedChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractDelegatePausedChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractDelegatePausedChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractDelegatePausedChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractDelegatePausedChanged represents a DelegatePausedChanged event raised by the VaultContract contract.
type VaultContractDelegatePausedChanged struct {
	IsPaused bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDelegatePausedChanged is a free log retrieval operation binding the contract event 0x1b005555035720946fb04f791db85f4e2d2ebcc123c059c1996e4538519f18f7.
//
// Solidity: event DelegatePausedChanged(bool isPaused)
func (_VaultContract *VaultContractFilterer) FilterDelegatePausedChanged(opts *bind.FilterOpts) (*VaultContractDelegatePausedChangedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "DelegatePausedChanged")
	if err != nil {
		return nil, err
	}
	return &VaultContractDelegatePausedChangedIterator{contract: _VaultContract.contract, event: "DelegatePausedChanged", logs: logs, sub: sub}, nil
}

// WatchDelegatePausedChanged is a free log subscription operation binding the contract event 0x1b005555035720946fb04f791db85f4e2d2ebcc123c059c1996e4538519f18f7.
//
// Solidity: event DelegatePausedChanged(bool isPaused)
func (_VaultContract *VaultContractFilterer) WatchDelegatePausedChanged(opts *bind.WatchOpts, sink chan<- *VaultContractDelegatePausedChanged) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "DelegatePausedChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractDelegatePausedChanged)
				if err := _VaultContract.contract.UnpackLog(event, "DelegatePausedChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegatePausedChanged is a log parse operation binding the contract event 0x1b005555035720946fb04f791db85f4e2d2ebcc123c059c1996e4538519f18f7.
//
// Solidity: event DelegatePausedChanged(bool isPaused)
func (_VaultContract *VaultContractFilterer) ParseDelegatePausedChanged(log types.Log) (*VaultContractDelegatePausedChanged, error) {
	event := new(VaultContractDelegatePausedChanged)
	if err := _VaultContract.contract.UnpackLog(event, "DelegatePausedChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the VaultContract contract.
type VaultContractInitializedIterator struct {
	Event *VaultContractInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractInitialized represents a Initialized event raised by the VaultContract contract.
type VaultContractInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_VaultContract *VaultContractFilterer) FilterInitialized(opts *bind.FilterOpts) (*VaultContractInitializedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &VaultContractInitializedIterator{contract: _VaultContract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_VaultContract *VaultContractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *VaultContractInitialized) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractInitialized)
				if err := _VaultContract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_VaultContract *VaultContractFilterer) ParseInitialized(log types.Log) (*VaultContractInitialized, error) {
	event := new(VaultContractInitialized)
	if err := _VaultContract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the VaultContract contract.
type VaultContractOwnershipTransferredIterator struct {
	Event *VaultContractOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractOwnershipTransferred represents a OwnershipTransferred event raised by the VaultContract contract.
type VaultContractOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_VaultContract *VaultContractFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VaultContractOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &VaultContractOwnershipTransferredIterator{contract: _VaultContract.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_VaultContract *VaultContractFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VaultContractOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractOwnershipTransferred)
				if err := _VaultContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_VaultContract *VaultContractFilterer) ParseOwnershipTransferred(log types.Log) (*VaultContractOwnershipTransferred, error) {
	event := new(VaultContractOwnershipTransferred)
	if err := _VaultContract.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractRewardsClaimedIterator is returned from FilterRewardsClaimed and is used to iterate over the raw logs and unpacked data for RewardsClaimed events raised by the VaultContract contract.
type VaultContractRewardsClaimedIterator struct {
	Event *VaultContractRewardsClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractRewardsClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractRewardsClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractRewardsClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractRewardsClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractRewardsClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractRewardsClaimed represents a RewardsClaimed event raised by the VaultContract contract.
type VaultContractRewardsClaimed struct {
	Claimer     common.Address
	ClaimAmount *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewardsClaimed is a free log retrieval operation binding the contract event 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe.
//
// Solidity: event RewardsClaimed(address claimer, uint256 claimAmount)
func (_VaultContract *VaultContractFilterer) FilterRewardsClaimed(opts *bind.FilterOpts) (*VaultContractRewardsClaimedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "RewardsClaimed")
	if err != nil {
		return nil, err
	}
	return &VaultContractRewardsClaimedIterator{contract: _VaultContract.contract, event: "RewardsClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardsClaimed is a free log subscription operation binding the contract event 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe.
//
// Solidity: event RewardsClaimed(address claimer, uint256 claimAmount)
func (_VaultContract *VaultContractFilterer) WatchRewardsClaimed(opts *bind.WatchOpts, sink chan<- *VaultContractRewardsClaimed) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "RewardsClaimed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractRewardsClaimed)
				if err := _VaultContract.contract.UnpackLog(event, "RewardsClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsClaimed is a log parse operation binding the contract event 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe.
//
// Solidity: event RewardsClaimed(address claimer, uint256 claimAmount)
func (_VaultContract *VaultContractFilterer) ParseRewardsClaimed(log types.Log) (*VaultContractRewardsClaimed, error) {
	event := new(VaultContractRewardsClaimed)
	if err := _VaultContract.contract.UnpackLog(event, "RewardsClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractWithdrawCancelledIterator is returned from FilterWithdrawCancelled and is used to iterate over the raw logs and unpacked data for WithdrawCancelled events raised by the VaultContract contract.
type VaultContractWithdrawCancelledIterator struct {
	Event *VaultContractWithdrawCancelled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractWithdrawCancelledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractWithdrawCancelled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractWithdrawCancelled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractWithdrawCancelledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractWithdrawCancelledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractWithdrawCancelled represents a WithdrawCancelled event raised by the VaultContract contract.
type VaultContractWithdrawCancelled struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdrawCancelled is a free log retrieval operation binding the contract event 0x6bcd1f6c4aebc81d81e3093e2f0e29e646cf00fcaaed7ab528d2a7c1f7309dad.
//
// Solidity: event WithdrawCancelled()
func (_VaultContract *VaultContractFilterer) FilterWithdrawCancelled(opts *bind.FilterOpts) (*VaultContractWithdrawCancelledIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "WithdrawCancelled")
	if err != nil {
		return nil, err
	}
	return &VaultContractWithdrawCancelledIterator{contract: _VaultContract.contract, event: "WithdrawCancelled", logs: logs, sub: sub}, nil
}

// WatchWithdrawCancelled is a free log subscription operation binding the contract event 0x6bcd1f6c4aebc81d81e3093e2f0e29e646cf00fcaaed7ab528d2a7c1f7309dad.
//
// Solidity: event WithdrawCancelled()
func (_VaultContract *VaultContractFilterer) WatchWithdrawCancelled(opts *bind.WatchOpts, sink chan<- *VaultContractWithdrawCancelled) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "WithdrawCancelled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractWithdrawCancelled)
				if err := _VaultContract.contract.UnpackLog(event, "WithdrawCancelled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawCancelled is a log parse operation binding the contract event 0x6bcd1f6c4aebc81d81e3093e2f0e29e646cf00fcaaed7ab528d2a7c1f7309dad.
//
// Solidity: event WithdrawCancelled()
func (_VaultContract *VaultContractFilterer) ParseWithdrawCancelled(log types.Log) (*VaultContractWithdrawCancelled, error) {
	event := new(VaultContractWithdrawCancelled)
	if err := _VaultContract.contract.UnpackLog(event, "WithdrawCancelled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractWithdrawConfirmedIterator is returned from FilterWithdrawConfirmed and is used to iterate over the raw logs and unpacked data for WithdrawConfirmed events raised by the VaultContract contract.
type VaultContractWithdrawConfirmedIterator struct {
	Event *VaultContractWithdrawConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractWithdrawConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractWithdrawConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractWithdrawConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractWithdrawConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractWithdrawConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractWithdrawConfirmed represents a WithdrawConfirmed event raised by the VaultContract contract.
type VaultContractWithdrawConfirmed struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterWithdrawConfirmed is a free log retrieval operation binding the contract event 0x167dd01d07a122f62228d08361b7daa4126637eacae74c28069c3a44379020d2.
//
// Solidity: event WithdrawConfirmed()
func (_VaultContract *VaultContractFilterer) FilterWithdrawConfirmed(opts *bind.FilterOpts) (*VaultContractWithdrawConfirmedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "WithdrawConfirmed")
	if err != nil {
		return nil, err
	}
	return &VaultContractWithdrawConfirmedIterator{contract: _VaultContract.contract, event: "WithdrawConfirmed", logs: logs, sub: sub}, nil
}

// WatchWithdrawConfirmed is a free log subscription operation binding the contract event 0x167dd01d07a122f62228d08361b7daa4126637eacae74c28069c3a44379020d2.
//
// Solidity: event WithdrawConfirmed()
func (_VaultContract *VaultContractFilterer) WatchWithdrawConfirmed(opts *bind.WatchOpts, sink chan<- *VaultContractWithdrawConfirmed) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "WithdrawConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractWithdrawConfirmed)
				if err := _VaultContract.contract.UnpackLog(event, "WithdrawConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawConfirmed is a log parse operation binding the contract event 0x167dd01d07a122f62228d08361b7daa4126637eacae74c28069c3a44379020d2.
//
// Solidity: event WithdrawConfirmed()
func (_VaultContract *VaultContractFilterer) ParseWithdrawConfirmed(log types.Log) (*VaultContractWithdrawConfirmed, error) {
	event := new(VaultContractWithdrawConfirmed)
	if err := _VaultContract.contract.UnpackLog(event, "WithdrawConfirmed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VaultContractWithdrawRequestedIterator is returned from FilterWithdrawRequested and is used to iterate over the raw logs and unpacked data for WithdrawRequested events raised by the VaultContract contract.
type VaultContractWithdrawRequestedIterator struct {
	Event *VaultContractWithdrawRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VaultContractWithdrawRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VaultContractWithdrawRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VaultContractWithdrawRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VaultContractWithdrawRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VaultContractWithdrawRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VaultContractWithdrawRequested represents a WithdrawRequested event raised by the VaultContract contract.
type VaultContractWithdrawRequested struct {
	TokenAmount   *big.Int
	WithdrawDelay *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequested is a free log retrieval operation binding the contract event 0x622ec52892a9917a9f66bd872232d3bea677db12565dd6da5f4bfc14607ec1d7.
//
// Solidity: event WithdrawRequested(uint256 tokenAmount, uint256 withdrawDelay)
func (_VaultContract *VaultContractFilterer) FilterWithdrawRequested(opts *bind.FilterOpts) (*VaultContractWithdrawRequestedIterator, error) {

	logs, sub, err := _VaultContract.contract.FilterLogs(opts, "WithdrawRequested")
	if err != nil {
		return nil, err
	}
	return &VaultContractWithdrawRequestedIterator{contract: _VaultContract.contract, event: "WithdrawRequested", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequested is a free log subscription operation binding the contract event 0x622ec52892a9917a9f66bd872232d3bea677db12565dd6da5f4bfc14607ec1d7.
//
// Solidity: event WithdrawRequested(uint256 tokenAmount, uint256 withdrawDelay)
func (_VaultContract *VaultContractFilterer) WatchWithdrawRequested(opts *bind.WatchOpts, sink chan<- *VaultContractWithdrawRequested) (event.Subscription, error) {

	logs, sub, err := _VaultContract.contract.WatchLogs(opts, "WithdrawRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VaultContractWithdrawRequested)
				if err := _VaultContract.contract.UnpackLog(event, "WithdrawRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRequested is a log parse operation binding the contract event 0x622ec52892a9917a9f66bd872232d3bea677db12565dd6da5f4bfc14607ec1d7.
//
// Solidity: event WithdrawRequested(uint256 tokenAmount, uint256 withdrawDelay)
func (_VaultContract *VaultContractFilterer) ParseWithdrawRequested(log types.Log) (*VaultContractWithdrawRequested, error) {
	event := new(VaultContractWithdrawRequested)
	if err := _VaultContract.contract.UnpackLog(event, "WithdrawRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
